package me.gong.fov;

import com.mojang.realmsclient.gui.ChatFormatting;
import net.minecraft.client.entity.AbstractClientPlayer;
import net.minecraft.init.Items;
import net.minecraftforge.client.event.FOVUpdateEvent;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

import static me.gong.fov.FOVMod.*;

@SideOnly(Side.CLIENT)
@Mod(modid = MOD_ID, name = NAME, version = VERSION, acceptedMinecraftVersions = ACCEPTED_VERSIONS)
public class FOVMod {

    public static final String MOD_ID = "gong_fov", NAME = "Gongs Addons: Constant FOV", VERSION = "1.0", ACCEPTED_VERSIONS = "[1.8,)";


    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent e) {
        final ModMetadata metadata = e.getModMetadata();

        metadata.authorList.add(ChatFormatting.BLUE + "TheMrGong");
        metadata.autogenerated = false;
        metadata.description = ChatFormatting.YELLOW + "Prevents FOV change from things like speed.";
    }

    @Mod.EventHandler
    public void onInit(FMLInitializationEvent e) {
        MinecraftForge.EVENT_BUS.register(this);
    }

    /**
     * Simulates a real calculation for the current FOV.
     *
     * @param player The player to calculate the FOV for
     * @return The calculated FOV
     */
    private float getModifier(AbstractClientPlayer player) {
        float fov = 1.0F;

        double movementSpeed;
        { //simulate calculation of movement speed, ignoring speed/slow effects
            if (player.isSprinting()) movementSpeed = 0.13000000312924387;
            else movementSpeed = 0.10000000149011612;
        }
        float walkSpeed = 0.1F; //ignore player walk speed, don't want that to affect FOV

        if (player.capabilities.isFlying)
            fov *= 1.1F;


        fov = (float) ((double) fov * ((movementSpeed / (double) walkSpeed + 1.0D) / 2.0D));

        if (player.capabilities.getWalkSpeed() == 0.0F || Float.isNaN(fov) || Float.isInfinite(fov)) {
            fov = 1.0F;
        }

        if (player.isUsingItem() && player.getItemInUse() != null && player.getItemInUse().getItem() == Items.bow) { //is using bow
            int i = player.getItemInUseDuration();
            float f1 = (float) i / 20.0F;

            if (f1 > 1.0F) f1 = 1.0F;
            else f1 = f1 * f1;

            fov *= 1.0F - f1 * 0.15F;
        }

        return fov;
    }

    @SubscribeEvent
    public void onFOV(FOVUpdateEvent ev) {
        if (ev.entity instanceof AbstractClientPlayer)
            ev.newfov = getModifier((AbstractClientPlayer) ev.entity);
    }
}